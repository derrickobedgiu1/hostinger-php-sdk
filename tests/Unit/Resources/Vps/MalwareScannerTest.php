<?php

declare(strict_types=1);

namespace DerrickOb\HostingerApi\Tests\Unit\Resources\Vps;

use DerrickOb\HostingerApi\Data\Vps\Action as ActionData;
use DerrickOb\HostingerApi\Data\Vps\MalwareMetrics;
use DerrickOb\HostingerApi\Resources\Vps\MalwareScanner;
use DerrickOb\HostingerApi\Tests\TestFactory;

test('can get malware scan metrics', function (): void {
    $faker = faker();
    $virtualMachineId = $faker->randomNumber(7);

    $scanStartedAt = $faker->dateTimeThisMonth();
    $scanEndedAt = (clone $scanStartedAt)->modify('+' . $faker->numberBetween(15, 60) . ' minutes');

    $metrics = [
        'records' => $faker->numberBetween(0, 100),
        'malicious' => $faker->numberBetween(0, 5),
        'compromised' => $faker->numberBetween(0, 3),
        'scanned_files' => $faker->numberBetween(50000, 200000),
        'scan_started_at' => $scanStartedAt->format('Y-m-d\TH:i:s\Z'),
        'scan_ended_at' => $scanEndedAt->format('Y-m-d\TH:i:s\Z'),
    ];

    $client = createMockClient();
    $client->shouldReceive('get')
        ->with('/api/vps/v1/virtual-machines/' . $virtualMachineId . '/monarx')
        ->once()
        ->andReturn($metrics);

    $resource = new MalwareScanner($client);
    $response = $resource->getMetrics($virtualMachineId);

    expect($response)->toBeInstanceOf(MalwareMetrics::class)
        ->and($response->records)->toBe($metrics['records'])
        ->and($response->malicious)->toBe($metrics['malicious'])
        ->and($response->compromised)->toBe($metrics['compromised'])
        ->and($response->scanned_files)->toBe($metrics['scanned_files']);
});

test('can install Monarx malware scanner', function (): void {
    $faker = faker();
    $virtualMachineId = $faker->randomNumber(7);

    $action = TestFactory::action(['name' => 'install_monarx']);

    $client = createMockClient();
    $client->shouldReceive('post')
        ->with('/api/vps/v1/virtual-machines/' . $virtualMachineId . '/monarx')
        ->once()
        ->andReturn($action);

    $resource = new MalwareScanner($client);
    $response = $resource->install($virtualMachineId);

    expect($response)->toBeInstanceOf(ActionData::class)
        ->and($response->id)->toBe($action['id'])
        ->and($response->name)->toBe('install_monarx');
});

test('can uninstall Monarx malware scanner', function (): void {
    $faker = faker();
    $virtualMachineId = $faker->randomNumber(7);

    $action = TestFactory::action(['name' => 'uninstall_monarx']);

    $client = createMockClient();
    $client->shouldReceive('delete')
        ->with('/api/vps/v1/virtual-machines/' . $virtualMachineId . '/monarx')
        ->once()
        ->andReturn($action);

    $resource = new MalwareScanner($client);
    $response = $resource->uninstall($virtualMachineId);

    expect($response)->toBeInstanceOf(ActionData::class)
        ->and($response->id)->toBe($action['id'])
        ->and($response->name)->toBe('uninstall_monarx');
});
